name: Documentation and Code Coverage

on:
  push:
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  run:
    name: Build documentation on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - uses: tlylt/install-graphviz@v1

      - name: Install pandoc
        run: sudo apt-get install -y pandoc

      - name: Install pytorch
        run: python -m pip install --pre torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/cpu

      # - name: Install numpy, onnxruntime-training
      #   run: python -m pip install numpy onnxruntime-training

      - name: Install requirements
        run: python -m pip install -r requirements.txt

      #- name: Install onnxscript
      #  run: |
      #  python -m pip install parameterized
      #  mkdir onnxscript_repo
      #  cd onnxscript
      #  git init
      #  git remote add -f origin https://github.com/microsoft/onnxscript.git
      #  git config core.sparsecheckout true
      #  echo "onnxscript" >> .git/info/sparse-checkout
      #  echo "setup.py" >> .git/info/sparse-checkout
      #  echo "pyproject*" >> .git/info/sparse-checkout
      #  echo "README*" >> .git/info/sparse-checkout
      #  echo "requirement*" >> .git/info/sparse-checkout
      #  echo "MANIFEST*" >> .git/info/sparse-checkout
      #  echo "LICENSE*" >> .git/info/sparse-checkout
      #  echo "VERSION*" >> .git/info/sparse-checkout
      #  git pull origin main --depth=1
      #  python -m pip install -e . -v
      #  rm onnxscript -rf
      #  cd ..
  
      - name: Install requirements dev
        run: |
          python -m pip install -r requirements-dev.txt

      - name: Uninstall onnx and install onnx-weekly
        run: |
          python -m pip uninstall -y onnx onnx-weekly
          python -m pip install onnx-weekly

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-

      # - name: Install onnxruntime-training again (2)
      #   run: |
      #     python -m pip uninstall -y onnxruntime onnxruntime-training
      #     python -m pip install onnxruntime-training

      - name: pip freeze
        run: python -m pip freeze

      - name: Generate coverage report
        run: |
          pip install pytest
          pip install pytest-cov
          export PYTHONPATH=.
          UNITTEST_GOING=1 pytest --cov=./experimental_experiment/ --cov-report=xml --durations=10 --ignore-glob=**LONG*.py --ignore-glob=**notebook*.py --ignore=_unittests/ut_torch_models/test_piece_by_piece_big.py --ignore=_unittests/ut_torch_interpreter/test_onnx_export_control_flow_scan.py _unittests
          export PYTHONPATH=

      - name: Generate coverage report
        run: |
          export PYTHONPATH=.
          UNITTEST_GOING=1 pytest _unittests/ut_torch_models/test_piece_by_piece_big.py
          export PYTHONPATH=

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Install
        run: python -m pip install -e . -v

      - name: Copy license, changelogs
        run: |
          cp LICENSE* ./_doc
          cp CHANGELOGS* ./_doc

      # - name: Install onnxruntime-training again (3)
      #   run: |
      #    python -m pip uninstall -y onnxruntime onnxruntime-training
      #     python -m pip install onnxruntime-training

      - name: Documentation
        continue-on-error: true
        run: UNITTEST_GOING=1 python -m sphinx ./_doc ./dist/html -n -w doc.txt

      - name: Summary
        run: cat doc.txt

      - name: Check for errors and warnings
        continue-on-error: true
        run: |
          if [[ $(grep ERROR doc.txt | grep -v 'Unknown target name: "l_shape"' | grep -v 'Unknown target name: "l_x"') ]]; then
            echo "Documentation produces errors."
            grep ERROR doc.txt
            exit 1
          fi
          if [[ $(grep WARNING doc.txt | grep -v 'tutorial/exported_onnx' | grep -v 'tutorial/exported_program' | grep -v 'plot-exporter-recipes-onnx-exporter' | grep -v 'plot-executorch' | grep -v 'l-plot-exporter' | grep -v 'failed to reach any of the inventories') ]]; then
            echo "Documentation produces warnings."
            grep WARNING doc.txt | grep -v 'tutorial/exported_onnx' | grep -v 'tutorial/exported_program' | grep -v 'plot-exporter-recipes-onnx-exporter' | grep -v 'plot-executorch' | grep -v 'l-plot-exporter' | grep -v 'failed to reach any of the inventories'
            exit 1
          fi

      - uses: actions/upload-artifact@v4
        with:
          path: ./dist/html/**
