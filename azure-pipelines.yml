jobs:
- job: 'L1_all_torch_transformers_nightly'
  pool:
    vmImage: 'ubuntu-latest'
  strategy:
    matrix:
      Python312-Linux:
        python.version: '3.12'
    maxParallel: 3

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'
  - script: sudo apt-get update
    displayName: 'AptGet Update'
  - script: sudo apt-get install -y graphviz
    displayName: 'Install Graphviz'
  - script: python -m pip install --upgrade pip wheel
    displayName: 'Install tools'
  - script: pip install --index-url=https://download.pytorch.org/whl/nightly/cpu --pre torch torchvision
    displayName: 'Install torch nightly'
  # - script: python -m pip install -i https://aiinfra.pkgs.visualstudio.com/PublicPackages/_packaging/ORT-Nightly/pypi/simple/ onnxruntime-training
  #   displayName: 'Install onnxruntime-training nightly'
  - script: pip install transformers
    displayName: 'Install specific version of transformers'
  - script: pip install -r requirements.txt
    displayName: 'Install Requirements'
  - script: |
      pip install -r requirements-dev.txt
    displayName: 'Install Requirements dev'
  - script: |
      python -m pip uninstall -y onnx onnx-weekly
      python -m pip install onnx-weekly
    displayName: 'Uninstall onnx and install onnx-weekly'
  - script: |
      python -c "import torch;print('torch', torch.__version__)"
      python -c "import transformers;print('transformers', transformers.__version__)"
      python -c "import onnxruntime;print('onnxruntime', onnxruntime.__version__)"
      python -c "import onnx;print('onnx', onnx.__version__)"
      python -c "import sklearn;print('scikit-learn', sklearn.__version__)"
      # python -c "import onnx_extended;print('onnx_extended', onnx_extended.__version__)"
      python -c "import onnxscript;print('onnxscript', getattr(onnxscript, '__version__', 'dev'))"
    displayName: 'Install check transformers version'
  - script: |
      ruff check .
    displayName: 'Ruff'
  - script: |
      black --diff .
    displayName: 'Black'
  - script: |
      python -m pip install --upgrade build
    displayName: 'install build'
  - script: |
      python -m build
    displayName: 'build wheel'
  - script: |
      python -c "import torchvision.extension"
    displayName: 'check torchvision'
  - script: |
      python -m pip install . -v
    displayName: 'install wheel'
  - script: |
      python -m pip freeze
    displayName: 'pip freeze'
  - script: |
      UNITTEST_ONNXRT=1 UNITTEST_GOING=1 python -m pytest _unittests/ut_torch_models _unittests/ut_torch_bench --durations=20 --ignore=_unittests/ut_torch_models/test_piece_by_piece_big.py
    displayName: 'Runs Unit Tests'
  - script: |
      UNITTEST_ONNXRT=1 UNITTEST_GOING=1 python _unittests/ut_torch_models/test_piece_by_piece_big.py
    displayName: 'Runs Unit Tests KNN'
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'wheel-linux-wheel-$(python.version)'
      targetPath: 'dist'

- job: 'L2_all_torch_nightly'
  pool:
    vmImage: 'ubuntu-latest'
  strategy:
    matrix:
      Python312-Linux:
        python.version: '3.12'
    maxParallel: 3

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'
  - script: sudo apt-get update
    displayName: 'AptGet Update'
  - script: sudo apt-get install -y graphviz
    displayName: 'Install Graphviz'
  - script: python -m pip install --upgrade pip wheel
    displayName: 'Install tools'
  - script: pip install --index-url=https://download.pytorch.org/whl/nightly/cpu --pre torch torchvision
    displayName: 'Install torch nightly'
  # - script: python -m pip install -i https://aiinfra.pkgs.visualstudio.com/PublicPackages/_packaging/ORT-Nightly/pypi/simple/ onnxruntime-training
  #   displayName: 'Install onnxruntime-training nightly'
  - script: pip install transformers
    displayName: 'Install specific version of transformers'
  - script: pip install -r requirements.txt
    displayName: 'Install Requirements'
  - script: |
      pip install -r requirements-dev.txt
    displayName: 'Install Requirements dev'
  - script: |
      python -m pip uninstall -y onnx onnx-weekly
      python -m pip install onnx-weekly
    displayName: 'Uninstall onnx and install onnx-weekly'
  - script: |
      python -c "import torch;print('torch', torch.__version__)"
      python -c "import transformers;print('transformers', transformers.__version__)"
      python -c "import onnxruntime;print('onnxruntime', onnxruntime.__version__)"
      python -c "import onnx;print('onnx', onnx.__version__)"
      python -c "import sklearn;print('scikit-learn', sklearn.__version__)"
      # python -c "import onnx_extended;print('onnx_extended', onnx_extended.__version__)"
      python -c "import onnxscript;print('onnxscript', getattr(onnxscript, '__version__', 'dev'))"
    displayName: 'Install check transformers version'
  - script: |
      ruff check .
    displayName: 'Ruff'
  - script: |
      black --diff .
    displayName: 'Black'
  - script: |
      python -m pip install --upgrade build
    displayName: 'install build'
  - script: |
      python -m build
    displayName: 'build wheel'
  - script: |
      python -c "import torchvision.extension"
    displayName: 'check torchvision'
  - script: |
      python -m pip install . -v
    displayName: 'install wheel'
  - script: |
      python -m pip uninstall -y onnx onnx-weekly
      python -m pip install onnx-weekly
    displayName: 'Uninstall onnx and install onnx-weekly'
  - script: |
      python -m pip freeze
    displayName: 'pip freeze'
  - script: |
      UNITTEST_ONNXRT=1 UNITTEST_GOING=1 python -m pytest _unittests --ignore=_unittests/ut_torch_models --ignore=_unittests/ut_torch_bench --ignore=_unittests/ut_torch_interpreter/test_onnx_export_control_flow_scan.py --durations=20
    displayName: 'Runs Unit Tests'

- job: 'L3_training_and_models_torch_nightly'
  pool:
    vmImage: 'ubuntu-latest'
  strategy:
    matrix:
      Python312-Linux:
        python.version: '3.12'
    maxParallel: 3

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'
  - script: sudo apt-get update
    displayName: 'AptGet Update'
  - script: sudo apt-get install -y graphviz
    displayName: 'Install Graphviz'
  - script: python -m pip install --upgrade pip wheel
    displayName: 'Install tools'
  - script: pip install --index-url=https://download.pytorch.org/whl/nightly/cpu --pre torch torchvision
    displayName: 'Install torch nightly'
  - script: pip install transformers
    displayName: 'Install specific version of transformers'
  - script: pip install -r requirements.txt
    displayName: 'Install Requirements'
  - script: |
      pip install -r requirements-dev.txt
  - script: |
      python -m pip uninstall -y onnx onnx-weekly
      python -m pip install onnx-weekly
    displayName: 'Uninstall onnx and install onnx-weekly'
  - script: |
      pip uninstall -y onnxruntime onnxruntime-training
      pip install onnxruntime-training-cpu
    displayName: 'Install onnxruntime-training'
  - script: |
      python -c "import torch;print('torch', torch.__version__)"
      python -c "import transformers;print('transformers', transformers.__version__)"
      python -c "import onnxruntime;print('onnxruntime', onnxruntime.__version__)"
      python -c "import onnx;print('onnx', onnx.__version__)"
      python -c "import sklearn;print('scikit-learn', sklearn.__version__)"
      # python -c "import onnx_extended;print('onnx_extended', onnx_extended.__version__)"
      python -c "import onnxscript;print('onnxscript', getattr(onnxscript, '__version__', 'dev'))"
    displayName: 'Install check transformers version'
  - script: |
      ruff check .
    displayName: 'Ruff'
  - script: |
      black --diff .
    displayName: 'Black'
  - script: |
      python -m pip install --upgrade build
    displayName: 'install build'
  - script: |
      python -m build
    displayName: 'build wheel'
  - script: |
      python -c "import torchvision.extension"
    displayName: 'check torchvision'
  - script: |
      python -m pip install . -v
    displayName: 'install wheel'
  - script: |
      python -m pip uninstall -y onnx onnx-weekly
      python -m pip install onnx-weekly
    displayName: 'Uninstall onnx and install onnx-weekly'
  - script: |
      python -m pip freeze
    displayName: 'pip freeze'
  - script: |
      UNITTEST_ONNXRT=1 UNITTEST_GOING=1 python -m pytest _unittests/ut_gradient _unittests/ut_reference _unittests/ut_torch_interpreter --ignore=_unittests/ut_torch_models/test_piece_by_piece_big.py --ignore=_unittests/ut_torch_interpreter/test_onnx_export_control_flow_scan.py --durations=20
    displayName: 'Test Interpreter'
  - script: |
      UNITTEST_ONNXRT=1 UNITTEST_GOING=1 python -m pytest _unittests/ut_torch_bench --ignore _unittests/ut_torch_bench/test_bash_bench_runner_cmd_options.py --ignore _unittests/ut_torch_bench/test_bash_bench_runner_cmd_untrained.py --durations=20
    displayName: 'Test Bench 1'
  - script: |
      UNITTEST_ONNXRT=1 UNITTEST_GOING=1 python -m pytest _unittests/ut_torch_bench/test_bash_bench_runner_cmd_options.py --durations=20
    displayName: 'Test Bench 2 - options'
  - script: |
      UNITTEST_ONNXRT=1 UNITTEST_GOING=1 python -m pytest _unittests/ut_torch_bench/test_bash_bench_runner_cmd_untrained.py --durations=20
    displayName: 'Test Bench 2 - untrained'
  - script: |
      UNITTEST_ONNXRT=1 UNITTEST_GOING=1 python -m pytest _unittests/ut_torch_models --ignore=_unittests/ut_torch_models/test_llm_model_helper.py --ignore=_unittests/ut_torch_models/test_chronos_model_helper.py --durations=20
    displayName: 'Test Models'
  - script: |
      UNITTEST_ONNXRT=1 UNITTEST_GOING=1 python -m pytest _unittests/ut_torch_models/test_chronos_model_helper.py --durations=20
    displayName: 'Test Chronos'
  - script: |
      UNITTEST_ONNXRT=1 UNITTEST_GOING=1 python -m pytest _unittests/ut_torch_models/test_piece_by_piece_big.py --durations=20
    displayName: 'Test PieceByPiece'

- job: 'L4_scan_torch_nightly'
  pool:
    vmImage: 'ubuntu-latest'
  strategy:
    matrix:
      Python312-Linux:
        python.version: '3.12'
    maxParallel: 3

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'
  - script: sudo apt-get update
    displayName: 'AptGet Update'
  - script: sudo apt-get install -y graphviz
    displayName: 'Install Graphviz'
  - script: python -m pip install --upgrade pip wheel
    displayName: 'Install tools'
  - script: pip install --index-url=https://download.pytorch.org/whl/nightly/cpu --pre torch torchvision
    displayName: 'Install torch nightly'
  - script: pip install transformers
    displayName: 'Install specific version of transformers'
  - script: pip install -r requirements.txt
    displayName: 'Install Requirements'
  - script: |
      pip install -r requirements-dev.txt
  - script: |
      python -m pip uninstall -y onnx onnx-weekly
      python -m pip install onnx-weekly
    displayName: 'Uninstall onnx and install onnx-weekly'
  - script: |
      pip uninstall -y onnxruntime onnxruntime-training
      pip install onnxruntime-training-cpu
    displayName: 'Install onnxruntime-training'
  - script: |
      python -c "import torch;print('torch', torch.__version__)"
      python -c "import transformers;print('transformers', transformers.__version__)"
      python -c "import onnxruntime;print('onnxruntime', onnxruntime.__version__)"
      python -c "import onnx;print('onnx', onnx.__version__)"
      python -c "import sklearn;print('scikit-learn', sklearn.__version__)"
      # python -c "import onnx_extended;print('onnx_extended', onnx_extended.__version__)"
      python -c "import onnxscript;print('onnxscript', getattr(onnxscript, '__version__', 'dev'))"
    displayName: 'Install check transformers version'
  - script: |
      ruff check .
    displayName: 'Ruff'
  - script: |
      black --diff .
    displayName: 'Black'
  - script: |
      python -m pip install --upgrade build
    displayName: 'install build'
  - script: |
      python -m build
    displayName: 'build wheel'
  - script: |
      python -c "import torchvision.extension"
    displayName: 'check torchvision'
  - script: |
      python -m pip install . -v
    displayName: 'install wheel'
  - script: |
      python -m pip uninstall -y onnx onnx-weekly
      python -m pip install onnx-weekly
    displayName: 'Uninstall onnx and install onnx-weekly'
  - script: |
      python -m pip freeze
    displayName: 'pip freeze'
  - script: |
      UNITTEST_ONNXRT=1 UNITTEST_GOING=1 python -m pytest _unittests/ut_torch_interpreter/test_onnx_export_control_flow_scan.py --durations=20
    displayName: 'Test Scan'
  - script: |
      UNITTEST_ONNXRT=1 UNITTEST_GOING=1 python -m pytest _unittests/ut_torch_models/test_piece_by_piece_big.py --durations=20
    displayName: 'Big Unit Tests'
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'wheel-linux-wheel-$(python.version)-training'
      targetPath: 'dist'

- job: 'L5'
  pool:
    vmImage: 'ubuntu-latest'
  strategy:
    matrix:
      Python311-Linux:
        python.version: '3.11'
    maxParallel: 3

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'
  - script: sudo apt-get update
    displayName: 'AptGet Update'
  - script: sudo apt-get install -y graphviz
    displayName: 'Install Graphviz'
  - script: python -m pip install --upgrade pip wheel
    displayName: 'Install tools'
  - script: pip install -r requirements.txt
    displayName: 'Install Requirements'
  #- script: |
  #    python -m pip install parameterized
  #    mkdir onnxscript_repo
  #    cd onnxscript_repo
  #    git init
  #    git remote add -f origin https://github.com/microsoft/onnxscript.git
  #    git config core.sparsecheckout true
  #    echo "onnxscript" >> .git/info/sparse-checkout
  #    echo "setup.py" >> .git/info/sparse-checkout
  #    echo "pyproject*" >> .git/info/sparse-checkout
  #    echo "README*" >> .git/info/sparse-checkout
  #    echo "requirement*" >> .git/info/sparse-checkout
  #    echo "MANIFEST*" >> .git/info/sparse-checkout
  #    echo "LICENSE*" >> .git/info/sparse-checkout
  #    echo "VERSION*" >> .git/info/sparse-checkout
  #    git pull origin main --depth=1
  #    python -m pip install -e . -v
  #    rm onnxscript -rf
  #    cd ..
  #  displayName: 'Install onnxscript'
  - script: |
      pip install -r requirements-dev.txt
    displayName: 'Install Requirements dev'
  - script: |
      python -m pip uninstall -y onnx onnx-weekly
      python -m pip install onnx-weekly
    displayName: 'Uninstall onnx and install onnx-weekly'
  - script: |
      pip install chronos-forecasting --no-deps  # because it enforces transformers to a wrong version
    displayName: 'Install Requirements chronos'
    continueOnError: true
  - script: |
      python -c "import torch;print('torch', torch.__version__)"
      python -c "import transformers;print('transformers', transformers.__version__)"
      python -c "import onnxruntime;print('onnxruntime', onnxruntime.__version__)"
      python -c "import onnx;print('onnx', onnx.__version__)"
      python -c "import sklearn;print('scikit-learn', sklearn.__version__)"
      # python -c "import onnx_extended;print('onnx_extended', onnx_extended.__version__)"
      python -c "import onnxscript;print('onnxscript', getattr(onnxscript, '__version__', 'dev'))"
    displayName: 'Install check transformers version'
  - script: |
      ruff check .
    displayName: 'Ruff'
  - script: |
      black --diff .
    displayName: 'Black'
  - script: |
      python -m pip wheel . --wheel-dir dist -v --no-build-isolation
    displayName: 'build wheel'
  - script: |
      python -m pip install . -v --no-build-isolation
    displayName: 'install wheel'
  - script: |
      python -m pip uninstall -y onnx onnx-weekly
      python -m pip install onnx-weekly
    displayName: 'Uninstall onnx and install onnx-weekly'
  - script: |
      python -m pip freeze
    displayName: 'pip freeze'
  - script: |
      UNITTEST_ONNXRT=1 UNITTEST_GOING=1 python -m pytest _unittests --ignore=_unittests/ut_torch_models --ignore=_unittests/ut_torch_interpreter/test_onnx_export_control_flow_scan.py --ignore _unittests/ut_torch_bench --durations=20
    displayName: 'Runs Unit Tests'
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'wheel-linux-wheel-$(python.version)'
      targetPath: 'dist'

- job: 'W6'
  pool:
    vmImage: 'windows-latest'
  strategy:
    matrix:
      Python311-Windows:
        python.version: '3.11'
    maxParallel: 3

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'
  - script: python -m pip install --upgrade pip setuptools wheel
    displayName: 'Install tools'
  - script: pip install -r requirements.txt
    displayName: 'Install Requirements'
  #- script: |
  #    python -m pip install parameterized
  #    mkdir onnxscript_repo
  #    cd onnxscript
  #    git init
  #    git remote add -f origin https://github.com/microsoft/onnxscript.git
  #    git config core.sparsecheckout true
  #    echo "onnxscript" >> .git/info/sparse-checkout
  #    echo "setup.py" >> .git/info/sparse-checkout
  #    echo "pyproject*" >> .git/info/sparse-checkout
  #    echo "README*" >> .git/info/sparse-checkout
  #    echo "requirement*" >> .git/info/sparse-checkout
  #    echo "MANIFEST*" >> .git/info/sparse-checkout
  #    echo "LICENSE*" >> .git/info/sparse-checkout
  #    echo "VERSION*" >> .git/info/sparse-checkout
  #    git pull origin main --depth=1
  #    python -m pip install -e . -v
  #    rm onnxscript -rf
  #    cd ..
  #  displayName: 'Install onnxscript'
  - script: |
      pip install -r requirements-dev.txt
    displayName: 'Install Requirements dev'
  - script: |
      python -m pip uninstall -y onnx onnx-weekly
      python -m pip install onnx-weekly
    displayName: 'Uninstall onnx and install onnx-weekly'
  - script: pip install onnxmltools --no-deps
    displayName: 'Install onnxmltools'
  - script: |
      python -m pip uninstall -y onnx onnx-weekly
      python -m pip install onnx-weekly
    displayName: 'Uninstall onnx and install onnx-weekly'
  - script: |
      python -m pip freeze
    displayName: 'pip freeze'
  - script: |
      python -m pytest _unittests --ignore=_unittests/ut_torch_models --ignore=_unittests/ut_torch_interpreter/test_onnx_export_control_flow_scan.py --durations=20
    displayName: 'Runs Unit Tests'
  - script: |
      python -u setup.py bdist_wheel
    displayName: 'Build Package'
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'wheel-windows-$(python.version)'
      targetPath: 'dist'

#- job: 'MacOS'
#  pool:
#    vmImage: 'macOS-latest'
#  strategy:
#    matrix:
#      Python311-Mac:
#        python.version: '3.12'
#        target.architecture: ['arm64']
#
#    maxParallel: 3
#
#  steps:
#  - task: UsePythonVersion@0
#    inputs:
#      versionSpec: '$(python.version)'
#      architecture: 'arm64'
#  - script: gcc --version
#    displayName: 'gcc version'
#  #- script: brew upgrade
#  #  displayName: 'brew upgrade'
#  #- script: brew update
#  #  displayName: 'brew update'
#  - script: export
#    displayName: 'export'
#  - script: gcc --version
#    displayName: 'gcc version'
#  - script: python -m pip install --upgrade pip setuptools wheel
#    displayName: 'Install tools'
#  - script: pip install -r requirements.txt
#    displayName: 'Install Requirements'
#  - script: |
#      pip install -r requirements-dev.txt
#    displayName: 'Install Requirements dev'
#  - script: pip install onnxmltools --no-deps
#    displayName: 'Install onnxmltools'
#  - script: |
#      python -m pip freeze
#    displayName: 'pip freeze'
#  - script: |
#      UNITTEST_ONNXRT=1 UNITTEST_GOING=1 python -m pytest _unittests --ignore=_unittests/ut_torch_models --ignore=_unittests/ut_torch_interpreter/test_onnx_export_control_flow_scan.py --durations=20
#    displayName: 'Runs Unit Tests'
#  - script: |
#      python -u setup.py bdist_wheel
#    displayName: 'Build Package'
#  - task: PublishPipelineArtifact@0
#    inputs:
#      artifactName: 'wheel-mac-$(python.version)'
#      targetPath: 'dist'

